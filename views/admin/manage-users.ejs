<%- include('admin-main', { title: 'Account Management', body: `
    <h1 class="text-2xl font-bold text-gray-800 mb-4">Accounts Management</h1>
    <p class="text-gray-600">Page for managing accounts in the store.</p>
<!-- Bộ lọc và sắp xếp -->
    <div class="bg-white shadow-md rounded-lg p-6 mb-6 mt-6">
        <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-3 gap-6">
            <div>
                <label for="searchField" class="block text-sm font-semibold text-gray-700 mb-2">
                    Search by
                </label>
                <select id="searchField" class="w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 p-2">
                    <option value="">Select Field</option>
                    <option value="username">Username</option>
                    <option value="email">Email</option>
                </select>
            </div>
        
            <div>
                <label for="search" class="block text-sm font-semibold text-gray-700 mb-2">
                    Search
                </label>
                <form>
                    <input type="text" id="search" class="w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 p-2" placeholder="Enter email">
                    <button type="submit"><span class="icon_search"></span></button>
                </form>
            </div>

            <div>
                <label for="filterRole" class="block text-sm font-semibold text-gray-700 mb-2">
                    Filter by Role
                </label>
                <select id="filterRole" class="w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 p-2">
                    <option value="">All Roles</option>
                    <option value="1">Admin</option>
                    <option value="0">Customer</option>
                </select>
            </div>

            <div>
                <label for="sortField" class="block text-sm font-semibold text-gray-700 mb-2">
                    Sort by
                </label>
                <select id="sortField" class="w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 p-2">
                    <option value="">Select Field</option>
                    <option value="username">Username</option>
                    <option value="email">Email</option>
                </select>
            </div>
        
            <div>
                <label for="sortType" class="block text-sm font-semibold text-gray-700 mb-2">
                    Sort Type
                </label>
                <select id="sortType" class="w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 p-2">
                    <option value="">Select</option>
                    <option value="ASC">A to Z</option>
                    <option value="DESC">Z to A</option>
                </select>
            </div>
        
            <div>
                <label for="filterStatus" class="block text-sm font-semibold text-gray-700 mb-2">
                    Filter by Status
                </label>
                <select id="filterStatus" class="w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 p-2">
                    <option value="">All Status</option>
                    <option value="1">Active</option>
                    <option value="0">Inactive</option>
                </select>
            </div>
        </div>
        
    </div>
    <!-- Nội dung chính -->
    <div class="mt-4 bg-white shadow-md rounded-lg p-4">
        <table class="min-w-full border">
            <thead class="bg-gray-100">
                <tr>
                    <th class="px-4 py-2 text-left">Username</th>
                    <th class="px-4 py-2 text-left">Email</th>   
                    <th class="px-4 py-2 text-left">Role</th>   
                    <th class="px-4 py-2 text-left">Action</th>
                </tr>
            </thead>
    ` }) %>            
            <tbody id="accountList">
                <% if (users && users.length > 0) { %> 
                    <% users.forEach(function(user) { %>
                        <tr>
                            <td class="border px-4 py-2"><%= user.username %></td>
                            <td class="border px-4 py-2"><%= user.email %></td>                                                                           
                            <td class="border px-4 py-2"><%= user.role === 1 ? "Admin" : "Customer" %></td>                   
                            <td class="border px-4 py-2">

                                <div class="flex space-x-2">
                                    <button onclick="showModal('<%= user._id %>')" 
                                        class="bg-blue-500 hover:bg-blue-700 text-white text-sm px-3 py-1 rounded-md shadow">
                                        View Details
                                    </button>   
                                    <form action="/admin/manage-users/update/<%= user._id %>" method="GET">
                                        <button type="submit" class="bg-red-500 hover:bg-red-600 text-white text-sm px-3 py-1 rounded-md shadow">
                                            <%= user.status === 1 ? "Ban" : "Unban" %>
                                        </button>
                                    </form>
                                </div>                                
                            </td>
                        </tr>  
                        <div id="userModal_<%= user._id %>" class="hidden fixed inset-0 bg-gray-500 bg-opacity-50 flex items-center justify-center">
                            <div class="bg-white p-6 rounded-lg shadow-lg">
                                <h2 class="text-2xl font-semibold">User Account Details</h2>
                                <div id="modalContent_<%= user._id %>">
                                    <p><strong>User ID:</strong> <%= user._id %></p>
                                    <p><strong>FullName:</strong> <%= user.fullname %></p>
                                    <p><strong>Username</strong>:</strong> <%= user.username %></p>
                                    <p><strong>Email:</strong> <%= user.email %></p>
                                    <p><strong>Role:</strong> <%= user.role === 1 ? "Admin" : "Customer" %></p>                                   
                                    <p><strong>Status:</strong> <%= user.status === 1 ? "Active" : "Inactive" %></p>                                                                
                                    <p><strong>Joined At:</strong> <%= String(user.createdAt).replace(" ", ", ") %></p>                                
                                </div>
                                <div class="text-center">
                                    <button onclick="closeModal('<%= user._id %>')" class="mt-4 bg-red-500 text-white px-4 py-2 rounded-md">Close</button>
                                </div>
                            </div>
                        </div>    
                                    
                    <% }); %>
                <% } else { %>
                    <tr>
                        <td colspan="9" class="text-center py-4 text-gray-500">
                            No Account Found!
                        </td>
                    </tr>

                    
                    
                    
                <% } %>
            </tbody>
        </table>    
        
        <div class="row">
            <div class="col-lg-12">
                <div id="paging" class="product__pagination">
                    <% 
                        const maxPagesToShow = 2; // Số lượng trang tối đa hiển thị liền kề
                        const startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
                        const endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);
                    %>
                
                    <!-- Trang trước -->
                    <% if (currentPage > 1 || totalPages != 0) { %>
                        <a data-value="<%= currentPage - 1 %>">&laquo;</a>
                    <% } %>
                
                    <!-- Trang đầu nếu cần -->
                    <% if (startPage > 1) { %>
                        <a data-value="1">1</a>
                        <% if (startPage > 2) { %>
                            <span>...</span>
                        <% } %>
                    <% } %>
                
                    <!-- Hiển thị các trang liền kề -->
                    <% for (let i = startPage; i <= endPage; i++) { %>
                        <a 
                            class="<%= currentPage === i ? 'active' : '' %>" 
                            data-value="<%= i %>">
                            <%= i %>
                        </a>
                    <% } %>
                
                    <!-- Trang cuối nếu cần -->
                    <% if (endPage < totalPages) { %>
                        <% if (endPage < totalPages - 1) { %>
                            <span>...</span>
                        <% } %>
                        <a data-value="<%= totalPages %>"><%= totalPages %></a>
                    <% } %>
                
                    <!-- Trang kế -->
                    <% if (currentPage < totalPages) { %>
                        <a data-value="<%= currentPage + 1 %>">&raquo;</a>
                    <% } %>
                </div>
                
            </div>
        </div>
    </div>

    <script>
        // Hàm mở modal
        function showModal(userId) {
            const modal = document.getElementById(`userModal_${userId}`);
            modal.classList.remove('hidden');
        }

        // Hàm đóng modal
        function closeModal(userId) {
            const modal = document.getElementById(`userModal_${userId}`);
            modal.classList.add('hidden');
        }

        // Đảm bảo modal đóng khi người dùng nhấn ra ngoài
        window.onclick = function(event) {
            if (event.target.classList.contains('fixed')) {
                event.target.classList.add('hidden');
            }
        };


    </script>

</div>

</div>
        
</div>

<script>
    let currentPage = 1;
const ITEMS_PER_PAGE = 2;

const elements = {
    searchField: document.getElementById('searchField'),
    search: document.getElementById('search'),
    filterRole: document.getElementById('filterRole'),
    sortField: document.getElementById('sortField'),
    sortType: document.getElementById('sortType'),
    filterStatus: document.getElementById('filterStatus'),
    paging: document.getElementById('paging'),
    accountList: document.getElementById('accountList'),
};

async function sendAjaxRequest() {
    try {
        const filters = getFilterData();
        const response = await fetch(`/admin/filterUser?${filters}`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        });

        const html = await response.text();
        updateDOM(html);
        updateUrl(filters);
    } catch (error) {
        console.error('Filter request failed:', error);
    }
}

document.addEventListener('DOMContentLoaded', initializeApp);

function initializeApp() {
    setupPaginationListener();
    setupFilterListeners();
}

function setupPaginationListener() {
    elements.paging.addEventListener('click', handlePaginationClick);
}

function setupFilterListeners() {
    elements.searchField.addEventListener('change', () => sendAjaxRequest());
    elements.filterRole.addEventListener('change', () => sendAjaxRequest());
    elements.filterStatus.addEventListener('change', () => sendAjaxRequest());
    elements.sortField.addEventListener('change', () => sendAjaxRequest());
    elements.sortType.addEventListener('change', () => sendAjaxRequest());
    elements.search.addEventListener('input', debounce(() => sendAjaxRequest(), 300));
}

function handlePaginationClick(event) {
    if (event.target.tagName !== 'A') return;

    updateActivePage(event.target);
    sendAjaxRequest();
}

function updateActivePage(clickedLink) {
    currentPage = clickedLink.getAttribute('data-value');
    const allLinks = elements.paging.querySelectorAll('a');
    allLinks.forEach(link => link.classList.remove('active'));
    clickedLink.classList.add('active');
}

function updateDOM(html) {
    const doc = new DOMParser().parseFromString(html, 'text/html');
    const sections = ['accountList', 'paging'];

    sections.forEach(section => {
        const newElement = doc.querySelector(`#${section}`);
        const currentElement = elements[section];
        if (newElement && currentElement) {
            currentElement.innerHTML = newElement.innerHTML;
        }
    });
}

function debounce(func, wait) {
    let timeout;
    return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
    };
}

function updateUrl(filters) {
    const newUrl = `/admin/filterUser?${filters}`;
    history.replaceState(null, '', newUrl);
}

function getFilterData() {
    const searchField = elements.searchField.value;
    const searchTerm = elements.search.value;
    const filterRole = elements.filterRole.value;
    const sortField = elements.sortField.value;
    const sortType = elements.sortType.value;
    const filterStatus = elements.filterStatus.value;

    let filters = `page=${currentPage}&itemsPerPage=${ITEMS_PER_PAGE}`;

    if (searchField) filters += `&searchField=${searchField}`;
    if (searchTerm) filters += `&searchTerm=${encodeURIComponent(searchTerm)}`;
    if (filterRole) filters += `&filterRole=${filterRole}`;
    if (sortField) filters += `&sortField=${sortField}`;
    if (sortType) filters += `&sortType=${sortType}`;
    if (filterStatus) filters += `&filterStatus=${filterStatus}`;

    return filters;
}
</script>

</body>
</html>


